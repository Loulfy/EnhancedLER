#version 460 core

#extension GL_EXT_control_flow_attributes: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require
#extension GL_GOOGLE_include_directive: require

#include "ler_shader.hpp"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform inFrustum { Frustum frustum; };
layout(set = 0, binding = 1) readonly buffer inInstBuffer { Instance props[]; };
layout(set = 0, binding = 2) readonly buffer inMeshBuffer { Meshlet meshes[]; };
layout(set = 0, binding = 3) writeonly buffer outDrawCommandBuffer { DrawCommand drawCommands[]; };
layout(set = 0, binding = 4) buffer DrawCount { uint drawCount; };
layout(set = 0, binding = 5) uniform sampler2D depthPyramid;
//layout(set = 0, binding = 6) uniform inCullData { CullData cullData; };

layout (push_constant) uniform block
{
    mat4 proj;
    mat4 view;
};

bool isAABBinFrustum(vec3 min, vec3 max)
{
    for (int i = 0; i < 6; i++) {
        int r = 0;
        r += ( dot( frustum.planes[i], vec4(min.x, min.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, min.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, max.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, max.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, min.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, min.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, max.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, max.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        if ( r == 8 ) return false;
    }

    int r = 0;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x > max.x) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x < min.x) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y > max.y) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y < min.y) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z > max.z) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z < min.z) ? 1 : 0 ); if ( r == 8 ) return false;

    return true;
}

bool projectSphere(vec3 c, float r, float znear, float P00, float P11, out vec4 aabb)
{
    if (c.z < r + znear)
        return false;

    vec3 cr = c * r;
    float czr2 = c.z * c.z - r * r;

    float vx = sqrt(c.x * c.x + czr2);
    float minx = (vx * c.x - cr.z) / (vx * c.z + cr.x);
    float maxx = (vx * c.x + cr.z) / (vx * c.z - cr.x);

    float vy = sqrt(c.y * c.y + czr2);
    float miny = (vy * c.y - cr.z) / (vy * c.z + cr.y);
    float maxy = (vy * c.y + cr.z) / (vy * c.z - cr.y);

    aabb = vec4(minx * P00, miny * P11, maxx * P00, maxy * P11);
    aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

    return true;
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere
// https://jcgt.org/published/0002/02/05/
bool tryCalculateSphereBounds(
vec3 _center,
float _radius,
float _zNear,
float _P00,
float _P11,
out vec4 _AABB)
{
    if (-_center.z < _radius + _zNear)
    {
        return false;
    }

    vec2 centerXZ = -_center.xz;
    vec2 vX = vec2(sqrt(dot(centerXZ, centerXZ) - _radius * _radius), _radius);
    vec2 minX = mat2(vX.x, vX.y, -vX.y, vX.x) * centerXZ;
    vec2 maxX = mat2(vX.x, -vX.y, vX.y, vX.x) * centerXZ;

    vec2 centerYZ = -_center.yz;
    vec2 vY = vec2(sqrt(dot(centerYZ, centerYZ) - _radius * _radius), _radius);
    vec2 minY = mat2(vY.x, vY.y, -vY.y, vY.x) * centerYZ;
    vec2 maxY = mat2(vY.x, -vY.y, vY.y, vY.x) * centerYZ;

    _AABB = 0.5 - 0.5 * vec4(
    minX.x / minX.y * _P00, minY.x / minY.y * _P11,
    maxX.x / maxX.y * _P00, maxY.x / maxY.y * _P11);

    return true;
}

vec3 calcNdcPos(vec3 pos, mat4 clip)
{
    vec4 clipPos = clip * vec4(pos, 1.f);
    vec3 res = clipPos.xyz / clipPos.w;
    res.xy /= 2;
    res.xy += vec2(0.5f, 0.5f);
    return res;
}

const float cam_near = 0.1f;
const float cam_far = 48.f;
const vec2 resolution = vec2(1280.f, 720.f);

const vec2 MAX_DEPTH_IMAGE_SIZE = vec2(2048.f);

const mat4 clip = mat4(
1.0f, 0.0f, 0.0f, 0.0f,
0.0f, -1.0f, 0.0f, 0.0f,
0.0f, 0.0f, 0.5f, 0.0f,
0.0f, 0.0f, 0.5f, 1.0f
);

// for frustum culling
const int NUM_PLANES = 4;
const vec3 a[NUM_PLANES] = {
vec3(1.f, 0.f, 0.f),
vec3(-1.f, 0.f, 0.f),
vec3(0.f, -1.f, 0.f),
vec3(0.f, 1.f, 0.f)
};
const vec3 n[NUM_PLANES] = {
vec3(-1.f, 0.f, 0.f),
vec3(1.f, 0.f, 0.f),
vec3(0.f, 1.f, 0.f),
vec3(0.f, -1.f, 0.f)
};

uint cull_near_far(float view_z)
{
    return uint(step(view_z, - cam_near) *
    step(- view_z, cam_far));
}

uint cull_lrtb(vec3 ndc)
{
    uint res = 1;
    for (int i = 0; i < NUM_PLANES; i ++)
    {
        float B = - dot(ndc - a[i], n[i]);
        res &= uint(step(B, 0.f));
    }
    return res;
}

uint is_skybox(vec2 mn, vec2 mx )
{
    return uint(step(dot(mn, mx), 0.f));
}

shared uint drawOffset;

void main()
{
    const uint idx = gl_GlobalInvocationID.x;
    const uint groupThreadIndex = gl_LocalInvocationID.x;
    const uint drawIndex = gl_GlobalInvocationID.x;

    bool bDrawMesh = false;
    // skip items beyond drawCount
    if(drawIndex < frustum.num) //numShapesToCull)
    {
        Instance obj = props[drawIndex];

        vec4 mi = obj.model * vec4(obj.bbmin, 1.f);
        vec4 ma = obj.model * vec4(obj.bbmax, 1.f);
        bDrawMesh = isAABBinFrustum(mi.xyz, ma.xyz);

        //float radius = obj.bounds.w;
        //float radius = (ma - mi).y/2.f;
        vec3 center = (obj.model * vec4(obj.bounds.xyz, 1.0)).xyz;
        float radius = length(ma.xyz - center);

        if(frustum.cull == 42 && bDrawMesh)
        {
            vec3 centerViewSpace = (view * vec4(center, 1.0)).xyz;
            float P00 = proj[0][0];
            float P11 = proj[1][1];
            float zNear = proj[3][2];//0.1f;//proj[3][2];
            vec4 AABB;
            if (tryCalculateSphereBounds(centerViewSpace, radius, zNear, P00, P11, AABB))
            {
                ivec2 size = textureSize(depthPyramid, 0);
                float boundsWidth = (AABB.z - AABB.x) * 2048.f;
                float boundsHeight = (AABB.w - AABB.y) * 2048.f;
                float mipIndex = floor(log2(max(boundsWidth, boundsHeight)));

                float occluderDepth = textureLod(depthPyramid, 0.5 * (AABB.xy + AABB.zw), mipIndex).x;
                float nearestBoundsDepth = zNear / (-centerViewSpace.z - radius);

                bool bOcclusionCulled = occluderDepth >= nearestBoundsDepth;
                bDrawMesh = bOcclusionCulled;
            }
        }

        /*
        if(frustum.cull == 42 && bDrawMesh)
        {
            vec3 bbmin = obj.bbmin;
            vec3 bbmax = obj.bbmax;
            vec3 bbsize = bbmax - bbmin;
            mat4 model_view = view * obj.model;
            mat4 projection_clip = clip * proj;

            const int CORNER_COUNT = 8;
            vec3 corners[CORNER_COUNT] = {
            bbmin,
            bbmin + vec3(bbsize.x, 0.f, 0.f),
            bbmin + vec3(0.f, bbsize.y, 0.f),
            bbmin + vec3(0.f, 0.f, bbsize.z),
            bbmin + vec3(bbsize.xy, 0.f),
            bbmin + vec3(0.f, bbsize.yz),
            bbmin + vec3(bbsize.x, 0.f, bbsize.z),
            bbmax
            };

            vec2 ndc_min = vec2(1.f);
            vec2 ndc_max = vec2(-1.f);
            float z_min = 1.f;

            uint res = 0;
            for (int i = 0; i < CORNER_COUNT; i++)
            {
                // cull near far
                vec4 view_pos = model_view * vec4(corners[i], 1.f);
                uint nf_res = cull_near_far(view_pos.z);

                // cull left right top bottom
                vec4 clip_pos = projection_clip * view_pos;
                vec3 ndc_pos = clip_pos.xyz / clip_pos.w;

                // clip objects behind near plane
                ndc_pos.z *= step(view_pos.z, cam_near);

                uint lrtb_res = cull_lrtb(ndc_pos);

                ndc_pos.xy = max(vec2(-1.f), min(vec2(1.f), ndc_pos.xy));
                ndc_pos.z = max(0.f, min(1.f, ndc_pos.z));

                ndc_min = min(ndc_min, ndc_pos.xy);
                ndc_max = max(ndc_max, ndc_pos.xy);
                z_min = min(z_min, ndc_pos.z);

                res = max(res, nf_res * lrtb_res);
            }

            res = max(res, is_skybox(ndc_min, ndc_max));

            vec2 viewport = vec2(1280.f, 780.f);
            vec2 scr_pos_min = (ndc_min * .5f + .5f) * viewport;
            vec2 scr_pos_max = (ndc_max * .5f + .5f) * viewport;
            vec2 scr_rect = (ndc_max - ndc_min) * .5f * viewport;
            float scr_size = max(scr_rect.x, scr_rect.y);

            int mip = int(ceil(log2(scr_size)));
            uvec2 dim = (uvec2(scr_pos_max) >> mip) - (uvec2(scr_pos_min) >> mip);
            int use_lower = int(step(dim.x, 2.f) * step(dim.y, 2.f));
            mip = use_lower * max(0, mip - 1) + (1 - use_lower) * mip;

            vec2 uv_scale = vec2(uvec2(resolution) >> mip) / resolution / vec2(2048 >> mip);
            vec2 uv_min = scr_pos_min * uv_scale;
            vec2 uv_max = scr_pos_max * uv_scale;
            vec2 coords[4] = {
                uv_min,
                vec2(uv_min.x, uv_max.y),
                vec2(uv_max.x, uv_min.y),
                uv_max
            };

            float scene_z = 0.f;
            for (int i = 0; i < 4; i ++) {
                scene_z = max(scene_z, textureLod(depthPyramid, coords[i], mip).r);
            }

            bDrawMesh = scene_z >= z_min;
            //uint res_occluder = 1 - uint(step(scene_z, z_min));
            //bDrawMesh = res_occluder >= 1;
        }*/
    }

    uvec4 drawMeshBallot = subgroupBallot(bDrawMesh);

    if (groupThreadIndex == 0)
    {
        uint drawMeshCount = subgroupBallotBitCount(drawMeshBallot);
        drawOffset = atomicAdd(drawCount, drawMeshCount);
    }

    subgroupMemoryBarrierShared();

    if (bDrawMesh)
    {
        Instance obj = props[drawIndex];
        Meshlet mesh = meshes[obj.lodId];

        DrawCommand drawCommand;
        drawCommand.baseInstance = 0;
        drawCommand.instanceCount = 1;
        drawCommand.firstIndex = mesh.firstIndex;
        drawCommand.countIndex = mesh.countIndex;
        drawCommand.baseVertex = mesh.vertexOffset;
        drawCommand.drawId = drawIndex;

        uint drawMeshIndex = subgroupBallotExclusiveBitCount(drawMeshBallot);

        uint drawCommandIndex = drawOffset + drawMeshIndex;
        drawCommands[drawCommandIndex] = drawCommand;
    }
}