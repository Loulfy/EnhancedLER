#version 460 core

#extension GL_EXT_control_flow_attributes: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require
#extension GL_GOOGLE_include_directive: require

#include "ler_shader.hpp"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform inFrustum { Frustum frustum; };
layout(set = 0, binding = 1) readonly buffer inInstBuffer { Instance props[]; };
layout(set = 0, binding = 2) readonly buffer inMeshBuffer { Meshlet meshes[]; };
layout(set = 0, binding = 3) writeonly buffer outDrawCommandBuffer { DrawCommand drawCommands[]; };
layout(set = 0, binding = 4) buffer DrawCount { uint drawCount; };
layout(set = 0, binding = 5) uniform sampler2D depthPyramid;
//layout(set = 0, binding = 6) uniform inCullData { CullData cullData; };

layout (push_constant) uniform block
{
    mat4 proj;
    mat4 view;
};

bool isAABBinFrustum(vec3 min, vec3 max)
{
    for (int i = 0; i < 6; i++) {
        int r = 0;
        r += ( dot( frustum.planes[i], vec4(min.x, min.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, min.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, max.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, max.y, min.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, min.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, min.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(min.x, max.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        r += ( dot( frustum.planes[i], vec4(max.x, max.y, max.z, 1.0f) ) < 0.0 ) ? 1 : 0;
        if ( r == 8 ) return false;
    }

    int r = 0;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x > max.x) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].x < min.x) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y > max.y) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].y < min.y) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z > max.z) ? 1 : 0 ); if ( r == 8 ) return false;
    r = 0; for ( int i = 0; i < 8; i++ ) r += ( (frustum.corners[i].z < min.z) ? 1 : 0 ); if ( r == 8 ) return false;

    return true;
}

bool projectSphere(vec3 c, float r, float znear, float P00, float P11, out vec4 aabb)
{
    if (c.z < r + znear)
    return false;

    vec3 cr = c * r;
    float czr2 = c.z * c.z - r * r;

    float vx = sqrt(c.x * c.x + czr2);
    float minx = (vx * c.x - cr.z) / (vx * c.z + cr.x);
    float maxx = (vx * c.x + cr.z) / (vx * c.z - cr.x);

    float vy = sqrt(c.y * c.y + czr2);
    float miny = (vy * c.y - cr.z) / (vy * c.z + cr.y);
    float maxy = (vy * c.y + cr.z) / (vy * c.z - cr.y);

    aabb = vec4(minx * P00, miny * P11, maxx * P00, maxy * P11);
    aabb = aabb.xwzy * vec4(0.5f, -0.5f, 0.5f, -0.5f) + vec4(0.5f); // clip space -> uv space

    return true;
}

// 2D Polyhedral Bounds of a Clipped, Perspective-Projected 3D Sphere
// https://jcgt.org/published/0002/02/05/
bool tryCalculateSphereBounds(
vec3 _center,
float _radius,
float _zNear,
float _P00,
float _P11,
out vec4 _AABB)
{
    if (-_center.z < _radius + _zNear)
    {
        return false;
    }

    vec2 centerXZ = -_center.xz;
    vec2 vX = vec2(sqrt(dot(centerXZ, centerXZ) - _radius * _radius), _radius);
    vec2 minX = mat2(vX.x, vX.y, -vX.y, vX.x) * centerXZ;
    vec2 maxX = mat2(vX.x, -vX.y, vX.y, vX.x) * centerXZ;

    vec2 centerYZ = -_center.yz;
    vec2 vY = vec2(sqrt(dot(centerYZ, centerYZ) - _radius * _radius), _radius);
    vec2 minY = mat2(vY.x, vY.y, -vY.y, vY.x) * centerYZ;
    vec2 maxY = mat2(vY.x, -vY.y, vY.y, vY.x) * centerYZ;

    _AABB = 0.5 - 0.5 * vec4(
    minX.x / minX.y * _P00, minY.x / minY.y * _P11,
    maxX.x / maxX.y * _P00, maxY.x / maxY.y * _P11);

    return true;
}

vec3 calcNdcPos(vec3 pos, mat4 clip)
{
    vec4 clipPos = clip * vec4(pos, 1.f);
    vec3 res = clipPos.xyz / clipPos.w;
    res.xy /= 2;
    res.xy += vec2(0.5f, 0.5f);
    return res;
}

shared uint drawOffset;

void main()
{
    const uint idx = gl_GlobalInvocationID.x;
    const uint groupThreadIndex = gl_LocalInvocationID.x;
    const uint drawIndex = gl_GlobalInvocationID.x;

    bool bDrawMesh = false;
    // skip items beyond drawCount
    if(drawIndex < frustum.num) //numShapesToCull)
    {
        Instance obj = props[drawIndex];
        bDrawMesh = isAABBinFrustum(obj.bbmin, obj.bbmax);

        vec3 center = (obj.bbmin+obj.bbmax)/2.f;
        float radius = max(length(obj.bbmax - center), length(obj.bbmin - center));
        vec3 centerViewSpace = (view * vec4(center, 1.0)).xyz;

        float P00 = proj[0][0];
        float P11 = proj[1][1];
        float zNear = 0.1f;


        if(frustum.cull == 42 && bDrawMesh)
        {
            vec3 bbmin = obj.bbmin;
            vec3 bbmax = obj.bbmax;
            vec3 bbsize = bbmax - bbmin;
            mat4 viewProj = proj * view;

            const int CORNER_COUNT = 8;
            vec3 corners[CORNER_COUNT] = {
            bbmin,
            bbmin + vec3(bbsize.x, 0.f, 0.f),
            bbmin + vec3(0.f, bbsize.y, 0.f),
            bbmin + vec3(0.f, 0.f, bbsize.z),
            bbmin + vec3(bbsize.xy, 0.f),
            bbmin + vec3(0.f, bbsize.yz),
            bbmin + vec3(bbsize.x, 0.f, bbsize.z),
            bbmax
            };

            vec2 ndc_min = vec2(1.f);
            vec2 ndc_max = vec2(-1.f);
            float minZ = 1.f;
            for (int i = 0; i < CORNER_COUNT; i++)
            {
                //transform world space aaBox to NDC
                //vec3 clipPos = calcNdcPos(corners[i], viewProj);

                vec4 clipPos = vec4(corners[i], 1) * viewProj;

                clipPos.z = max(clipPos.z, 0);

                clipPos.xyz = clipPos.xyz / clipPos.w;

                clipPos.xy = clamp(clipPos.xy, -1, 1);
                clipPos.xy = clipPos.xy * vec2(0.5, -0.5) + vec2(0.5, 0.5);

                ndc_min = min(clipPos.xy, ndc_min);
                ndc_max = max(clipPos.xy, ndc_max);

                minZ = clamp(min(minZ, clipPos.z),0.f,1.f);
            }

            vec2 RTSize = vec2(2048, 2048);
            vec4 boxUVs = vec4(ndc_min, ndc_max);

            // Calculate hi-Z buffer mip
            vec2 size = (ndc_max - ndc_min) * RTSize.xy;
            float mip = ceil(log2(max(size.x, size.y)));

            mip = clamp(mip, 0, 12);

            // Texel footprint for the lower (finer-grained) level
            float  level_lower = max(mip - 1, 0);
            vec2 scale = vec2(exp2(-level_lower));
            vec2 a = floor(boxUVs.xy*scale);
            vec2 b = ceil(boxUVs.zw*scale);
            vec2 dims = b - a;

            // Use the lower level if we only touch <= 2 texels in both dimensions
            if (dims.x <= 2 && dims.y <= 2)
                mip = level_lower;

            vec4 depth = vec4(
            textureLod(depthPyramid, boxUVs.xy, mip).r,
            textureLod(depthPyramid, boxUVs.zy, mip).r,
            textureLod(depthPyramid, boxUVs.xw, mip).r,
            textureLod(depthPyramid, boxUVs.zw, mip).r
            );

            float maxDepth = max(max(max(depth.x, depth.y), depth.z), depth.w);
            bDrawMesh = minZ <= maxDepth;
        }

        /*vec4 aabb;
        if (frustum.cull == 42 && bDrawMesh && projectSphere(center, radius, zNear, P00, P11, aabb))
        {
            ivec2 size = textureSize(depthPyramid, 0);
            float width = (aabb.z - aabb.x) * float(size.x);
            float height = (aabb.w - aabb.y) * float(size.y);

            float mipIndex = floor(log2(max(width, height)));

            vec2 uv = (aabb.xy + aabb.zw) * 0.5;
            //uv.y = 1 - uv.y;
            // Sampler is set up to do min reduction, so this computes the minimum depth of a 2x2 texel quad
            float depth = textureLod(depthPyramid, uv, mipIndex).r;
            float depthSphere = zNear / (-centerViewSpace.z);

            bDrawMesh = depthSphere > depth;
        }*/

        /*vec3 bmin = calcNdcPos(obj.bbmin, clipProj);
        vec3 bmax = calcNdcPos(obj.bbmax, clipProj);
        vec3 center = (obj.bbmin+obj.bbmax)/2.f;
        vec3 centerViewSpace = (view * vec4(center, 1.0)).xyz;
        float radius = length(center - obj.bbmin);

        float boundsWidth = (bmax.x - bmin.x) * 2048.f;
        float boundsHeight = (bmax.y - bmin.y) * 2048.f;
        float mipIndex = floor(log2(max(boundsWidth, boundsHeight)));

        float zNear = clipProj[3][2];
        float occluderDepth = textureLod(depthPyramid, 0.5 * (bmin.xy + bmax.xy), mipIndex).x;
        float nearestBoundsDepth = zNear / (-centerViewSpace.z - radius);

        bool bOcclusionCulled = occluderDepth >= nearestBoundsDepth;
        bDrawMesh = !bOcclusionCulled;*/
    }

    uvec4 drawMeshBallot = subgroupBallot(bDrawMesh);

    if (groupThreadIndex == 0)
    {
        uint drawMeshCount = subgroupBallotBitCount(drawMeshBallot);
        drawOffset = atomicAdd(drawCount, drawMeshCount);
    }

    subgroupMemoryBarrierShared();

    if (bDrawMesh)
    {
        Instance obj = props[drawIndex];
        Meshlet mesh = meshes[obj.lodId];

        DrawCommand drawCommand;
        drawCommand.baseInstance = 0;
        drawCommand.instanceCount = 1;
        drawCommand.firstIndex = mesh.firstIndex;
        drawCommand.countIndex = mesh.countIndex;
        drawCommand.baseVertex = mesh.vertexOffset;
        drawCommand.drawId = drawIndex;

        uint drawMeshIndex = subgroupBallotExclusiveBitCount(drawMeshBallot);

        uint drawCommandIndex = drawOffset + drawMeshIndex;
        drawCommands[drawCommandIndex] = drawCommand;
    }
}